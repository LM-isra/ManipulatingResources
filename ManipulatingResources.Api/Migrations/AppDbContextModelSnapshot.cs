// <auto-generated />
using System;
using ManipulatingResources.Api.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManipulatingResources.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Data.AccountPayable", b =>
                {
                    b.Property<Guid>("IdAccountPayable")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePayment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("IdAccountType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IdCoin")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IdMovementType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IdStatus")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("IdSupplier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Invoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("IdAccountPayable");

                    b.HasIndex("IdAccountType");

                    b.HasIndex("IdCoin");

                    b.HasIndex("IdMovementType");

                    b.HasIndex("IdStatus");

                    b.ToTable("AccountsPayables");
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Data.AccountReceivable", b =>
                {
                    b.Property<Guid>("IdAccountReceivable")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePayment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("IdAccountType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("IdCoin")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IdMovementType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IdStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Invoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("IdAccountReceivable");

                    b.HasIndex("IdAccountType");

                    b.HasIndex("IdCoin");

                    b.HasIndex("IdMovementType");

                    b.HasIndex("IdStatus");

                    b.ToTable("AccountsReceivables");
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Data.Client", b =>
                {
                    b.Property<Guid>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("AllowCredit")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("IdStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdClient");

                    b.HasIndex("IdStatus");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Data.Supplier", b =>
                {
                    b.Property<Guid>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("CreditDays")
                        .HasColumnType("smallint");

                    b.Property<byte>("IdStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdSupplier");

                    b.HasIndex("IdStatus");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Nomenclatures.AccountType", b =>
                {
                    b.Property<byte>("IdAccountType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("IdAccountType");

                    b.ToTable("AccountsTypes");
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Nomenclatures.Coin", b =>
                {
                    b.Property<byte>("IdCoin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("IdCoin");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Nomenclatures.MovementType", b =>
                {
                    b.Property<byte>("IdMovementType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdMovementType");

                    b.ToTable("MovementsTypes");
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Nomenclatures.Status", b =>
                {
                    b.Property<byte>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdStatus");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Data.AccountPayable", b =>
                {
                    b.HasOne("ManipulatingResources.Api.Entities.Data.Supplier", "Supplier")
                        .WithMany("AccountPayables")
                        .HasForeignKey("IdAccountPayable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.AccountType", "AccountType")
                        .WithMany("AccountPayables")
                        .HasForeignKey("IdAccountType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.Coin", "Coin")
                        .WithMany("AccountPayables")
                        .HasForeignKey("IdCoin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.MovementType", "MovementType")
                        .WithMany("AccountPayables")
                        .HasForeignKey("IdMovementType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.Status", "Status")
                        .WithMany("AccountPayables")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Data.AccountReceivable", b =>
                {
                    b.HasOne("ManipulatingResources.Api.Entities.Data.Client", "Client")
                        .WithMany("AccountReceivables")
                        .HasForeignKey("IdAccountReceivable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.AccountType", "AccountType")
                        .WithMany("AccountReceivables")
                        .HasForeignKey("IdAccountType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.Coin", "Coin")
                        .WithMany("AccountReceivables")
                        .HasForeignKey("IdCoin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.MovementType", "MovementType")
                        .WithMany("AccountReceivables")
                        .HasForeignKey("IdMovementType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.Status", "Status")
                        .WithMany("AccountReceivables")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Data.Client", b =>
                {
                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.Status", "Status")
                        .WithMany("Clients")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManipulatingResources.Api.Entities.Data.Supplier", b =>
                {
                    b.HasOne("ManipulatingResources.Api.Entities.Nomenclatures.Status", "Status")
                        .WithMany("Suppliers")
                        .HasForeignKey("IdStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
